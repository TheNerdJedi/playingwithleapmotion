public override void OnDisconnect (Controller controller)
    {
        //Note: not dispatched when running in a debugger.
        SafeWriteLine ("Disconnected");
    }

    public override void OnExit (Controller controller)
    {
        SafeWriteLine ("Exited");
    }

    public override void OnFrame (Controller controller)
    {
        Frame frame = controller.frame();
        
        SafeWriteLine("Frame id: "+ frame.id()
                + ", timestamp: " + frame.timestamp()
                + ", hands: " + frame.hands().count()
                + ", fingers: " + frame.fingers().count()
                + ", tools: " + frame.tools().count()
                + ", gestures: " + frame.gestures().count());

        foreach (Hand hand in frame.Hands) 
        {
            SafeWriteLine ("  Hand id: " + hand.Id
                        + ", palm position: " + hand.PalmPosition);
            // Get the hand's normal vector and direction
            Vector normal = hand.PalmNormal;
            Vector direction = hand.Direction;

            // Calculate the hand's pitch, roll, and yaw angles
            SafeWriteLine ("  Hand pitch: " + direction.Pitch * 180.0f / (float)Math.PI + " degrees, "
                        + "roll: " + normal.Roll * 180.0f / (float)Math.PI + " degrees, "
                        + "yaw: " + direction.Yaw * 180.0f / (float)Math.PI + " degrees");

            // Get the Arm bone
            Arm arm = hand.Arm;
            SafeWriteLine ("  Arm direction: " + arm.Direction
                        + ", wrist position: " + arm.WristPosition
                        + ", elbow position: " + arm.ElbowPosition);

            // Get fingers
            foreach (Finger finger in hand.Fingers) 
            {
                SafeWriteLine ("    Finger id: " + finger.Id
                            + ", " + finger.Type().ToString()
                            + ", length: " + finger.Length
                            + "mm, width: " + finger.Width + "mm");

                // Get finger bones
                Bone bone;
                foreach (Bone.BoneType boneType in (Bone.BoneType[]) Enum.GetValues(typeof(Bone.BoneType)))
                {
                    bone = finger.Bone(boneType);
                    SafeWriteLine("      Bone: " + boneType
                                + ", start: " + bone.PrevJoint
                                + ", end: " + bone.NextJoint
                                + ", direction: " + bone.Direction);
                }
            }
        }
